generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// SQLite doesn't support enums, using strings instead

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String
  role            String   @default("MEMBER")
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  member          Member?
  cardDesigns     CardDesign[]
}

model Member {
  id              String   @id @default(cuid())
  membershipId    String   @unique
  firstName       String
  lastName        String
  email           String
  points          Int      @default(0)
  status          String   @default("ACTIVE")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  checkinSessions CheckinSession[]
  pointsTransactions PointsTransaction[]
  
  // Google Wallet tracking
  googleWalletLink       String?
  googleWalletCreatedAt  DateTime?
  
  // Apple Wallet tracking
  appleWalletLink        String?
  appleWalletCreatedAt   DateTime?
  
  @@map("members")
}

model PointsTransaction {
  id        String   @id @default(cuid())
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
  delta     Int
  reason    String?
  createdAt DateTime @default(now())
}

model CheckinSession {
  id         String   @id @default(cuid())
  memberId   String
  member     Member   @relation(fields: [memberId], references: [id])
  checkinAt  DateTime @default(now())
  checkoutAt DateTime?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CardDesign {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  designData  String   // JSON string containing design configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String   @id @default(cuid())
  ticketNumber String  @unique
  subject     String
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  category    String?  // TECHNICAL, BILLING, GENERAL, etc.
  createdBy   String
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  messages    SupportMessage[]
  
  @@map("support_tickets")
}

model SupportMessage {
  id          String   @id @default(cuid())
  ticketId    String
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  senderId    String
  senderRole  String   // MEMBER, ADMIN
  message     String
  isInternal  Boolean  @default(false) // Internal notes only visible to admins
  attachments String?  // JSON array of attachment URLs
  createdAt   DateTime @default(now())
  readAt      DateTime?
  
  @@map("support_messages")
}
